{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CardList","props","className","profiles","map","profile","key","id","Card","p","this","blog","href","target","src","avatar_url","name","company","location","html_url","React","Component","Form","state","userName","search_history","handleSubmit","event","a","preventDefault","login","includes","axios","get","resp","onSubmit","data","x","push","setState","console","log","error","alert","response","status","headers","filterFunction","forEach","element","r","type","value","onChange","placeholder","required","App","addNewProfile","profileData","prevState","title","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e456062.chunk.js","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\n\nconst CardList = (props) => (\n  <div className=\"cardlist\">\n    {props.profiles.map(profile => <Card key={profile.id} {...profile} />)}\n  </div>\n);\n\nclass Card extends React.Component {\n\n  render() {\n    const profile = this.props;\n    let p;\n    if (profile.blog) {\n      p = <div className=\"linkdin\"><a href={profile.blog} target=\"_blank\"><i className=\"fa fa-linkedin\" ></i></a></div>\n    }\n    else {\n      p = <div></div>\n    }\n    return (\n      <div className=\"github-profile\">\n        <img src={profile.avatar_url} ></img>\n        <div className=\"info\">\n          <div className=\"name\">{profile.name}</div>\n          <div className=\"company\">{profile.company}</div>\n          <div className=\"location\">{profile.location}</div>\n          {p}\n          <div className=\"git-hub\"><a href={profile.html_url} target=\"_blank\"><i className=\"fa fa-github\"></i></a></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Form extends React.Component {\n  state = {\n    userName: '',\n    search_history: []\n  };\n  handleSubmit = async (event) => {\n    var resp;\n    event.preventDefault();\n\n    let r = this.props.profiles.map(a => {\n      if (a.login === this.state.userName) {\n        return 'true';\n      }\n      else\n        return null\n    })\n    if (r.includes('true')) {\n      return;\n    }\n    try {\n      resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n      this.props.onSubmit(resp.data);\n      let x = [...this.state.search_history]\n      x.push(this.state.userName);\n      this.setState({ search_history: x })\n      this.setState({ userName: '' });\n    }\n    catch (err) {\n      console.log(err)\n      console.error(\"Error response:\");\n      alert('NOT FOUND')\n      console.error(err.response.data);    // ***\n      console.error(err.response.status);  // ***\n      console.error(err.response.headers); // ***\n    } finally {\n      console.log(resp);\n    }\n\n  };\n  filterFunction = () => {\n    this.state.search_history.forEach(element => {\n      return (\n        <div>{element}</div>);\n    })\n\n  };\n  render() {\n    console.log('hello')\n    const r = this.state.search_history.map(element => {\n      return (\n        <div></div>);\n    })\n    console.log(r)\n\n    console.log(this.state.search_history)\n    return (\n      <form onSubmit={this.handleSubmit} >\n\n        <div className=\"form_div\">\n          <input\n            className=\"abc\"\n            type=\"text\"\n            value={this.state.userName}\n            onChange={event => this.setState({ userName: event.target.value })}\n            placeholder=\"GitHub username\"\n            required\n          // onKeyUp ={ (event) => if(event.target.value===null{\n\n          // })}\n          />\n\n          <button>Add card</button>\n        </div>\n      </form>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  state = {\n    profiles: []\n\n  };\n  addNewProfile = (profileData) => {\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render() {\n    return (\n      <div className=\"main-div\">\n        <div className=\"header\">{this.props.title}\n        </div>\n        <Form onSubmit={this.addNewProfile} profiles={this.state.profiles} />\n        <CardList profiles={this.state.profiles} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App title=\"The GitHub Cards App\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}